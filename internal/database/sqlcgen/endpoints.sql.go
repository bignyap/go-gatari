// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: endpoints.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteApiEndpointById = `-- name: DeleteApiEndpointById :exec
DELETE FROM api_endpoint
WHERE api_endpoint_id = $1
`

func (q *Queries) DeleteApiEndpointById(ctx context.Context, apiEndpointID int32) error {
	_, err := q.db.Exec(ctx, deleteApiEndpointById, apiEndpointID)
	return err
}

const getApiEndpointById = `-- name: GetApiEndpointById :one
SELECT api_endpoint.api_endpoint_id, api_endpoint.endpoint_name, api_endpoint.endpoint_description, api_endpoint.http_method, api_endpoint.path_template, api_endpoint.resource_type_id, resource_type.resource_type_name
FROM api_endpoint
INNER JOIN resource_type ON resource_type.resource_type_id = api_endpoint.resource_type_id
WHERE api_endpoint_id = $1
`

type GetApiEndpointByIdRow struct {
	ApiEndpointID       int32
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
	ResourceTypeName    string
}

func (q *Queries) GetApiEndpointById(ctx context.Context, apiEndpointID int32) (GetApiEndpointByIdRow, error) {
	row := q.db.QueryRow(ctx, getApiEndpointById, apiEndpointID)
	var i GetApiEndpointByIdRow
	err := row.Scan(
		&i.ApiEndpointID,
		&i.EndpointName,
		&i.EndpointDescription,
		&i.HttpMethod,
		&i.PathTemplate,
		&i.ResourceTypeID,
		&i.ResourceTypeName,
	)
	return i, err
}

const getApiEndpointByName = `-- name: GetApiEndpointByName :one
SELECT api_endpoint.api_endpoint_id, api_endpoint.endpoint_name, api_endpoint.endpoint_description, api_endpoint.http_method, api_endpoint.path_template, api_endpoint.resource_type_id, resource_type.resource_type_name
FROM api_endpoint
INNER JOIN resource_type ON resource_type.resource_type_id = api_endpoint.resource_type_id
WHERE endpoint_name = $1
`

type GetApiEndpointByNameRow struct {
	ApiEndpointID       int32
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
	ResourceTypeName    string
}

func (q *Queries) GetApiEndpointByName(ctx context.Context, endpointName string) (GetApiEndpointByNameRow, error) {
	row := q.db.QueryRow(ctx, getApiEndpointByName, endpointName)
	var i GetApiEndpointByNameRow
	err := row.Scan(
		&i.ApiEndpointID,
		&i.EndpointName,
		&i.EndpointDescription,
		&i.HttpMethod,
		&i.PathTemplate,
		&i.ResourceTypeID,
		&i.ResourceTypeName,
	)
	return i, err
}

const listApiEndpoint = `-- name: ListApiEndpoint :many
SELECT api_endpoint.api_endpoint_id, api_endpoint.endpoint_name, api_endpoint.endpoint_description, api_endpoint.http_method, api_endpoint.path_template, api_endpoint.resource_type_id, resource_type.resource_type_name
FROM api_endpoint
INNER JOIN resource_type ON resource_type.resource_type_id = api_endpoint.resource_type_id
ORDER BY api_endpoint_id DESC
LIMIT $1 OFFSET $2
`

type ListApiEndpointParams struct {
	Limit  int32
	Offset int32
}

type ListApiEndpointRow struct {
	ApiEndpointID       int32
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
	ResourceTypeName    string
}

func (q *Queries) ListApiEndpoint(ctx context.Context, arg ListApiEndpointParams) ([]ListApiEndpointRow, error) {
	rows, err := q.db.Query(ctx, listApiEndpoint, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListApiEndpointRow{}
	for rows.Next() {
		var i ListApiEndpointRow
		if err := rows.Scan(
			&i.ApiEndpointID,
			&i.EndpointName,
			&i.EndpointDescription,
			&i.HttpMethod,
			&i.PathTemplate,
			&i.ResourceTypeID,
			&i.ResourceTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApiEndpointsByResourceType = `-- name: ListApiEndpointsByResourceType :many
SELECT api_endpoint.api_endpoint_id, api_endpoint.endpoint_name, api_endpoint.endpoint_description, api_endpoint.http_method, api_endpoint.path_template, api_endpoint.resource_type_id, resource_type.resource_type_name
FROM api_endpoint
INNER JOIN resource_type ON resource_type.resource_type_id = api_endpoint.resource_type_id
WHERE api_endpoint.resource_type_id = $1
ORDER BY api_endpoint_id DESC
`

type ListApiEndpointsByResourceTypeRow struct {
	ApiEndpointID       int32
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
	ResourceTypeName    string
}

func (q *Queries) ListApiEndpointsByResourceType(ctx context.Context, resourceTypeID int32) ([]ListApiEndpointsByResourceTypeRow, error) {
	rows, err := q.db.Query(ctx, listApiEndpointsByResourceType, resourceTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListApiEndpointsByResourceTypeRow{}
	for rows.Next() {
		var i ListApiEndpointsByResourceTypeRow
		if err := rows.Scan(
			&i.ApiEndpointID,
			&i.EndpointName,
			&i.EndpointDescription,
			&i.HttpMethod,
			&i.PathTemplate,
			&i.ResourceTypeID,
			&i.ResourceTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerApiEndpoint = `-- name: RegisterApiEndpoint :one
INSERT INTO api_endpoint (
  endpoint_name,
  endpoint_description,
  http_method,
  path_template,
  resource_type_id
)
VALUES ($1, $2, $3, $4, $5)
RETURNING api_endpoint_id
`

type RegisterApiEndpointParams struct {
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
}

func (q *Queries) RegisterApiEndpoint(ctx context.Context, arg RegisterApiEndpointParams) (int32, error) {
	row := q.db.QueryRow(ctx, registerApiEndpoint,
		arg.EndpointName,
		arg.EndpointDescription,
		arg.HttpMethod,
		arg.PathTemplate,
		arg.ResourceTypeID,
	)
	var api_endpoint_id int32
	err := row.Scan(&api_endpoint_id)
	return api_endpoint_id, err
}

type RegisterApiEndpointsParams struct {
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
}

const updateApiEndpointById = `-- name: UpdateApiEndpointById :exec
UPDATE api_endpoint
SET
  endpoint_name = $2,
  endpoint_description = $3,
  http_method = $4,
  path_template = $5,
  resource_type_id = $6
WHERE api_endpoint_id = $1
`

type UpdateApiEndpointByIdParams struct {
	ApiEndpointID       int32
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
}

func (q *Queries) UpdateApiEndpointById(ctx context.Context, arg UpdateApiEndpointByIdParams) error {
	_, err := q.db.Exec(ctx, updateApiEndpointById,
		arg.ApiEndpointID,
		arg.EndpointName,
		arg.EndpointDescription,
		arg.HttpMethod,
		arg.PathTemplate,
		arg.ResourceTypeID,
	)
	return err
}

const upsertApiEndpointByName = `-- name: UpsertApiEndpointByName :one
INSERT INTO api_endpoint (
  endpoint_name,
  endpoint_description,
  http_method,
  path_template,
  resource_type_id
)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (endpoint_name) DO UPDATE
SET
  endpoint_description = EXCLUDED.endpoint_description,
  http_method = EXCLUDED.http_method,
  path_template = EXCLUDED.path_template,
  resource_type_id = EXCLUDED.resource_type_id
RETURNING api_endpoint_id
`

type UpsertApiEndpointByNameParams struct {
	EndpointName        string
	EndpointDescription pgtype.Text
	HttpMethod          string
	PathTemplate        string
	ResourceTypeID      int32
}

func (q *Queries) UpsertApiEndpointByName(ctx context.Context, arg UpsertApiEndpointByNameParams) (int32, error) {
	row := q.db.QueryRow(ctx, upsertApiEndpointByName,
		arg.EndpointName,
		arg.EndpointDescription,
		arg.HttpMethod,
		arg.PathTemplate,
		arg.ResourceTypeID,
	)
	var api_endpoint_id int32
	err := row.Scan(&api_endpoint_id)
	return api_endpoint_id, err
}
