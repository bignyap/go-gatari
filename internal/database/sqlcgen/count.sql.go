// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: count.sql

package sqlcgen

import (
	"context"
)

const getDashboardSummary = `-- name: GetDashboardSummary :many
SELECT resource_type_count, api_endpoint_count, organization_count, active_organization_count, subscription_tier_count, active_subscription_tier_count, subscription_count, active_subscription_count, billing_history_count, usage_summary_count, organization_permission_count, permission_type_count FROM dashboard_summary_view
`

func (q *Queries) GetDashboardSummary(ctx context.Context) ([]DashboardSummaryView, error) {
	rows, err := q.db.Query(ctx, getDashboardSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardSummaryView{}
	for rows.Next() {
		var i DashboardSummaryView
		if err := rows.Scan(
			&i.ResourceTypeCount,
			&i.ApiEndpointCount,
			&i.OrganizationCount,
			&i.ActiveOrganizationCount,
			&i.SubscriptionTierCount,
			&i.ActiveSubscriptionTierCount,
			&i.SubscriptionCount,
			&i.ActiveSubscriptionCount,
			&i.BillingHistoryCount,
			&i.UsageSummaryCount,
			&i.OrganizationPermissionCount,
			&i.PermissionTypeCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
