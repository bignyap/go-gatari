// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tier_pricing.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTierPricing = `-- name: CreateTierPricing :one
INSERT INTO tier_base_pricing (subscription_tier_id, api_endpoint_id, base_cost_per_call, base_rate_limit, cost_mode) 
VALUES ($1, $2, $3, $4, $5)
RETURNING tier_base_pricing_id
`

type CreateTierPricingParams struct {
	SubscriptionTierID int32       `json:"subscription_tier_id"`
	ApiEndpointID      int32       `json:"api_endpoint_id"`
	BaseCostPerCall    float64     `json:"base_cost_per_call"`
	BaseRateLimit      pgtype.Int4 `json:"base_rate_limit"`
	CostMode           string      `json:"cost_mode"`
}

func (q *Queries) CreateTierPricing(ctx context.Context, arg CreateTierPricingParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTierPricing,
		arg.SubscriptionTierID,
		arg.ApiEndpointID,
		arg.BaseCostPerCall,
		arg.BaseRateLimit,
		arg.CostMode,
	)
	var tier_base_pricing_id int32
	err := row.Scan(&tier_base_pricing_id)
	return tier_base_pricing_id, err
}

type CreateTierPricingsParams struct {
	SubscriptionTierID int32       `json:"subscription_tier_id"`
	ApiEndpointID      int32       `json:"api_endpoint_id"`
	BaseCostPerCall    float64     `json:"base_cost_per_call"`
	BaseRateLimit      pgtype.Int4 `json:"base_rate_limit"`
	CostMode           string      `json:"cost_mode"`
}

const deleteTierPricingById = `-- name: DeleteTierPricingById :exec
DELETE FROM tier_base_pricing
WHERE tier_base_pricing_id = $1
`

func (q *Queries) DeleteTierPricingById(ctx context.Context, tierBasePricingID int32) error {
	_, err := q.db.Exec(ctx, deleteTierPricingById, tierBasePricingID)
	return err
}

const deleteTierPricingByTierId = `-- name: DeleteTierPricingByTierId :exec
DELETE FROM tier_base_pricing
WHERE subscription_tier_id = $1
`

func (q *Queries) DeleteTierPricingByTierId(ctx context.Context, subscriptionTierID int32) error {
	_, err := q.db.Exec(ctx, deleteTierPricingByTierId, subscriptionTierID)
	return err
}

const getPricing = `-- name: GetPricing :one
SELECT
  COALESCE(cep.custom_cost_per_call, tbp.base_cost_per_call, 0)::double precision AS cost_per_call,
  COALESCE(cep.cost_mode, tbp.cost_mode, 'fixed') AS cost_mode
FROM subscription
JOIN tier_base_pricing tbp
  ON subscription.subscription_tier_id = tbp.subscription_tier_id
  AND tbp.api_endpoint_id = $2
LEFT JOIN custom_endpoint_pricing cep
  ON cep.subscription_id = subscription.subscription_id
  AND cep.tier_base_pricing_id = tbp.tier_base_pricing_id
WHERE subscription.subscription_id = $1
`

type GetPricingParams struct {
	SubscriptionID int32 `json:"subscription_id"`
	ApiEndpointID  int32 `json:"api_endpoint_id"`
}

type GetPricingRow struct {
	CostPerCall float64 `json:"cost_per_call"`
	CostMode    string  `json:"cost_mode"`
}

func (q *Queries) GetPricing(ctx context.Context, arg GetPricingParams) (GetPricingRow, error) {
	row := q.db.QueryRow(ctx, getPricing, arg.SubscriptionID, arg.ApiEndpointID)
	var i GetPricingRow
	err := row.Scan(&i.CostPerCall, &i.CostMode)
	return i, err
}

const getTierPricingByTierId = `-- name: GetTierPricingByTierId :many
SELECT 
    tier_base_pricing.tier_base_pricing_id, tier_base_pricing.base_cost_per_call, tier_base_pricing.base_rate_limit, tier_base_pricing.api_endpoint_id, tier_base_pricing.subscription_tier_id, tier_base_pricing.cost_mode, api_endpoint.endpoint_name,
    COUNT(tier_base_pricing_id) OVER() AS total_items
FROM tier_base_pricing
INNER JOIN api_endpoint ON tier_base_pricing.api_endpoint_id = api_endpoint.api_endpoint_id
WHERE subscription_tier_id = $1
LIMIT $2 OFFSET $3
`

type GetTierPricingByTierIdParams struct {
	SubscriptionTierID int32 `json:"subscription_tier_id"`
	Limit              int32 `json:"limit"`
	Offset             int32 `json:"offset"`
}

type GetTierPricingByTierIdRow struct {
	TierBasePricingID  int32       `json:"tier_base_pricing_id"`
	BaseCostPerCall    float64     `json:"base_cost_per_call"`
	BaseRateLimit      pgtype.Int4 `json:"base_rate_limit"`
	ApiEndpointID      int32       `json:"api_endpoint_id"`
	SubscriptionTierID int32       `json:"subscription_tier_id"`
	CostMode           string      `json:"cost_mode"`
	EndpointName       string      `json:"endpoint_name"`
	TotalItems         int64       `json:"total_items"`
}

func (q *Queries) GetTierPricingByTierId(ctx context.Context, arg GetTierPricingByTierIdParams) ([]GetTierPricingByTierIdRow, error) {
	rows, err := q.db.Query(ctx, getTierPricingByTierId, arg.SubscriptionTierID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTierPricingByTierIdRow{}
	for rows.Next() {
		var i GetTierPricingByTierIdRow
		if err := rows.Scan(
			&i.TierBasePricingID,
			&i.BaseCostPerCall,
			&i.BaseRateLimit,
			&i.ApiEndpointID,
			&i.SubscriptionTierID,
			&i.CostMode,
			&i.EndpointName,
			&i.TotalItems,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTierPricingById = `-- name: UpdateTierPricingById :execresult
UPDATE tier_base_pricing
SET 
    base_cost_per_call = $1,
    base_rate_limit = $2,
    api_endpoint_id = $3,
    cost_mode = $4
WHERE tier_base_pricing_id = $5
`

type UpdateTierPricingByIdParams struct {
	BaseCostPerCall   float64     `json:"base_cost_per_call"`
	BaseRateLimit     pgtype.Int4 `json:"base_rate_limit"`
	ApiEndpointID     int32       `json:"api_endpoint_id"`
	CostMode          string      `json:"cost_mode"`
	TierBasePricingID int32       `json:"tier_base_pricing_id"`
}

func (q *Queries) UpdateTierPricingById(ctx context.Context, arg UpdateTierPricingByIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateTierPricingById,
		arg.BaseCostPerCall,
		arg.BaseRateLimit,
		arg.ApiEndpointID,
		arg.CostMode,
		arg.TierBasePricingID,
	)
}

const updateTierPricingByTierId = `-- name: UpdateTierPricingByTierId :execresult
UPDATE tier_base_pricing
SET 
    base_cost_per_call = $1,
    base_rate_limit = $2,
    api_endpoint_id = $3,
    cost_mode = $4
WHERE subscription_tier_id = $5
`

type UpdateTierPricingByTierIdParams struct {
	BaseCostPerCall    float64     `json:"base_cost_per_call"`
	BaseRateLimit      pgtype.Int4 `json:"base_rate_limit"`
	ApiEndpointID      int32       `json:"api_endpoint_id"`
	CostMode           string      `json:"cost_mode"`
	SubscriptionTierID int32       `json:"subscription_tier_id"`
}

func (q *Queries) UpdateTierPricingByTierId(ctx context.Context, arg UpdateTierPricingByTierIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateTierPricingByTierId,
		arg.BaseCostPerCall,
		arg.BaseRateLimit,
		arg.ApiEndpointID,
		arg.CostMode,
		arg.SubscriptionTierID,
	)
}
