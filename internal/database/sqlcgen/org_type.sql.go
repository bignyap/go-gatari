// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: org_type.sql

package sqlcgen

import (
	"context"
)

const createOrgType = `-- name: CreateOrgType :one
INSERT INTO organization_type (organization_type_name) 
VALUES ($1)
RETURNING organization_type_id
`

func (q *Queries) CreateOrgType(ctx context.Context, organizationTypeName string) (int32, error) {
	row := q.db.QueryRow(ctx, createOrgType, organizationTypeName)
	var organization_type_id int32
	err := row.Scan(&organization_type_id)
	return organization_type_id, err
}

const deleteOrgTypeById = `-- name: DeleteOrgTypeById :exec
DELETE FROM organization_type
WHERE organization_type_id = $1
`

func (q *Queries) DeleteOrgTypeById(ctx context.Context, organizationTypeID int32) error {
	_, err := q.db.Exec(ctx, deleteOrgTypeById, organizationTypeID)
	return err
}

const listOrgType = `-- name: ListOrgType :many
SELECT organization_type_id, organization_type_name FROM organization_type
ORDER BY organization_type_name
LIMIT $1 OFFSET $2
`

type ListOrgTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrgType(ctx context.Context, arg ListOrgTypeParams) ([]OrganizationType, error) {
	rows, err := q.db.Query(ctx, listOrgType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrganizationType{}
	for rows.Next() {
		var i OrganizationType
		if err := rows.Scan(&i.OrganizationTypeID, &i.OrganizationTypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
