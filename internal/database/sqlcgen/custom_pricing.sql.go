// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: custom_pricing.sql

package sqlcgen

import (
	"context"
)

const createCustomPricing = `-- name: CreateCustomPricing :one
INSERT INTO custom_endpoint_pricing (
    custom_cost_per_call, custom_rate_limit,
    subscription_id, tier_base_pricing_id, cost_mode
) 
VALUES ($1, $2, $3, $4, $5)
RETURNING custom_endpoint_pricing_id
`

type CreateCustomPricingParams struct {
	CustomCostPerCall float64 `json:"custom_cost_per_call"`
	CustomRateLimit   int32   `json:"custom_rate_limit"`
	SubscriptionID    int32   `json:"subscription_id"`
	TierBasePricingID int32   `json:"tier_base_pricing_id"`
	CostMode          string  `json:"cost_mode"`
}

func (q *Queries) CreateCustomPricing(ctx context.Context, arg CreateCustomPricingParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCustomPricing,
		arg.CustomCostPerCall,
		arg.CustomRateLimit,
		arg.SubscriptionID,
		arg.TierBasePricingID,
		arg.CostMode,
	)
	var custom_endpoint_pricing_id int32
	err := row.Scan(&custom_endpoint_pricing_id)
	return custom_endpoint_pricing_id, err
}

type CreateCustomPricingsParams struct {
	CustomCostPerCall float64 `json:"custom_cost_per_call"`
	CustomRateLimit   int32   `json:"custom_rate_limit"`
	SubscriptionID    int32   `json:"subscription_id"`
	TierBasePricingID int32   `json:"tier_base_pricing_id"`
	CostMode          string  `json:"cost_mode"`
}

const deleteCustomPricingById = `-- name: DeleteCustomPricingById :one
DELETE FROM custom_endpoint_pricing
WHERE custom_endpoint_pricing_id = $1
RETURNING subscription_id
`

func (q *Queries) DeleteCustomPricingById(ctx context.Context, customEndpointPricingID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCustomPricingById, customEndpointPricingID)
	var subscription_id int32
	err := row.Scan(&subscription_id)
	return subscription_id, err
}

const deleteCustomPricingBySubscriptionId = `-- name: DeleteCustomPricingBySubscriptionId :one
DELETE FROM custom_endpoint_pricing
WHERE subscription_id = $1
RETURNING subscription_id
`

func (q *Queries) DeleteCustomPricingBySubscriptionId(ctx context.Context, subscriptionID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCustomPricingBySubscriptionId, subscriptionID)
	var subscription_id int32
	err := row.Scan(&subscription_id)
	return subscription_id, err
}

const getCustomPricing = `-- name: GetCustomPricing :many
SELECT custom_endpoint_pricing_id, custom_cost_per_call, custom_rate_limit, subscription_id, tier_base_pricing_id, cost_mode FROM custom_endpoint_pricing
WHERE subscription_id = $1
LIMIT $2 OFFSET $3
`

type GetCustomPricingParams struct {
	SubscriptionID int32 `json:"subscription_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) GetCustomPricing(ctx context.Context, arg GetCustomPricingParams) ([]CustomEndpointPricing, error) {
	rows, err := q.db.Query(ctx, getCustomPricing, arg.SubscriptionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomEndpointPricing{}
	for rows.Next() {
		var i CustomEndpointPricing
		if err := rows.Scan(
			&i.CustomEndpointPricingID,
			&i.CustomCostPerCall,
			&i.CustomRateLimit,
			&i.SubscriptionID,
			&i.TierBasePricingID,
			&i.CostMode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
