// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: org_permission.sql

package sqlcgen

import (
	"context"
)

const createOrgPermission = `-- name: CreateOrgPermission :one
INSERT INTO organization_permission (
    resource_type_id, permission_code, organization_id
) 
VALUES ($1, $2, $3)
RETURNING organization_id
`

type CreateOrgPermissionParams struct {
	ResourceTypeID int32  `json:"resource_type_id"`
	PermissionCode string `json:"permission_code"`
	OrganizationID int32  `json:"organization_id"`
}

func (q *Queries) CreateOrgPermission(ctx context.Context, arg CreateOrgPermissionParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrgPermission, arg.ResourceTypeID, arg.PermissionCode, arg.OrganizationID)
	var organization_id int32
	err := row.Scan(&organization_id)
	return organization_id, err
}

type CreateOrgPermissionsParams struct {
	ResourceTypeID int32  `json:"resource_type_id"`
	PermissionCode string `json:"permission_code"`
	OrganizationID int32  `json:"organization_id"`
}

const deleteOrgPermissionById = `-- name: DeleteOrgPermissionById :exec
DELETE FROM organization_permission
WHERE organization_permission_id = $1
`

func (q *Queries) DeleteOrgPermissionById(ctx context.Context, organizationPermissionID int32) error {
	_, err := q.db.Exec(ctx, deleteOrgPermissionById, organizationPermissionID)
	return err
}

const deleteOrgPermissionByOrgId = `-- name: DeleteOrgPermissionByOrgId :exec
DELETE FROM organization_permission
WHERE organization_id = $1
`

func (q *Queries) DeleteOrgPermissionByOrgId(ctx context.Context, organizationID int32) error {
	_, err := q.db.Exec(ctx, deleteOrgPermissionByOrgId, organizationID)
	return err
}

const getOrgPermission = `-- name: GetOrgPermission :many
SELECT organization_permission_id, resource_type_id, permission_code, organization_id FROM organization_permission
WHERE organization_id = $1
LIMIT $2 OFFSET $3
`

type GetOrgPermissionParams struct {
	OrganizationID int32 `json:"organization_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) GetOrgPermission(ctx context.Context, arg GetOrgPermissionParams) ([]OrganizationPermission, error) {
	rows, err := q.db.Query(ctx, getOrgPermission, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrganizationPermission{}
	for rows.Next() {
		var i OrganizationPermission
		if err := rows.Scan(
			&i.OrganizationPermissionID,
			&i.ResourceTypeID,
			&i.PermissionCode,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
