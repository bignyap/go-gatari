// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource_type.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createResourceType = `-- name: CreateResourceType :one
INSERT INTO resource_type (
    resource_type_name, resource_type_code, resource_type_description
) 
VALUES ($1, $2, $3)
RETURNING resource_type_id
`

type CreateResourceTypeParams struct {
	ResourceTypeName        string      `json:"resource_type_name"`
	ResourceTypeCode        string      `json:"resource_type_code"`
	ResourceTypeDescription pgtype.Text `json:"resource_type_description"`
}

func (q *Queries) CreateResourceType(ctx context.Context, arg CreateResourceTypeParams) (int32, error) {
	row := q.db.QueryRow(ctx, createResourceType, arg.ResourceTypeName, arg.ResourceTypeCode, arg.ResourceTypeDescription)
	var resource_type_id int32
	err := row.Scan(&resource_type_id)
	return resource_type_id, err
}

type CreateResourceTypesParams struct {
	ResourceTypeName        string      `json:"resource_type_name"`
	ResourceTypeCode        string      `json:"resource_type_code"`
	ResourceTypeDescription pgtype.Text `json:"resource_type_description"`
}

const deleteResourceTypeById = `-- name: DeleteResourceTypeById :exec
DELETE FROM resource_type
WHERE resource_type_id = $1
`

func (q *Queries) DeleteResourceTypeById(ctx context.Context, resourceTypeID int32) error {
	_, err := q.db.Exec(ctx, deleteResourceTypeById, resourceTypeID)
	return err
}

const listResourceType = `-- name: ListResourceType :many
SELECT resource_type_id, resource_type_code, resource_type_name, resource_type_description FROM resource_type
ORDER BY resource_type_name
LIMIT $1 OFFSET $2
`

type ListResourceTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListResourceType(ctx context.Context, arg ListResourceTypeParams) ([]ResourceType, error) {
	rows, err := q.db.Query(ctx, listResourceType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResourceType{}
	for rows.Next() {
		var i ResourceType
		if err := rows.Scan(
			&i.ResourceTypeID,
			&i.ResourceTypeCode,
			&i.ResourceTypeName,
			&i.ResourceTypeDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
