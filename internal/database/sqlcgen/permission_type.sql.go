// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission_type.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPermissionType = `-- name: CreatePermissionType :one
INSERT INTO permission_type (
    permission_code, permission_name, permission_description
)
VALUES ($1, $2, $3)
RETURNING permission_code
`

type CreatePermissionTypeParams struct {
	PermissionCode        string      `json:"permission_code"`
	PermissionName        string      `json:"permission_name"`
	PermissionDescription pgtype.Text `json:"permission_description"`
}

func (q *Queries) CreatePermissionType(ctx context.Context, arg CreatePermissionTypeParams) (string, error) {
	row := q.db.QueryRow(ctx, createPermissionType, arg.PermissionCode, arg.PermissionName, arg.PermissionDescription)
	var permission_code string
	err := row.Scan(&permission_code)
	return permission_code, err
}

type CreatePermissionTypesParams struct {
	PermissionCode        string      `json:"permission_code"`
	PermissionName        string      `json:"permission_name"`
	PermissionDescription pgtype.Text `json:"permission_description"`
}

const deletePermissionTypeByCode = `-- name: DeletePermissionTypeByCode :exec
DELETE FROM permission_type
WHERE permission_code = $1
`

func (q *Queries) DeletePermissionTypeByCode(ctx context.Context, permissionCode string) error {
	_, err := q.db.Exec(ctx, deletePermissionTypeByCode, permissionCode)
	return err
}

const listPermissionTypes = `-- name: ListPermissionTypes :many
SELECT permission_code, permission_name, permission_description FROM permission_type
ORDER BY permission_name
LIMIT $1 OFFSET $2
`

type ListPermissionTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPermissionTypes(ctx context.Context, arg ListPermissionTypesParams) ([]PermissionType, error) {
	rows, err := q.db.Query(ctx, listPermissionTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PermissionType{}
	for rows.Next() {
		var i PermissionType
		if err := rows.Scan(&i.PermissionCode, &i.PermissionName, &i.PermissionDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
