// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organization.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organization (
    organization_name, organization_created_at, organization_updated_at, 
    organization_realm, organization_country, organization_support_email,
    organization_active, organization_report_q, organization_config,
    organization_type_id
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING organization_id
`

type CreateOrganizationParams struct {
	OrganizationName         string
	OrganizationCreatedAt    int32
	OrganizationUpdatedAt    int32
	OrganizationRealm        string
	OrganizationCountry      pgtype.Text
	OrganizationSupportEmail string
	OrganizationActive       pgtype.Bool
	OrganizationReportQ      pgtype.Bool
	OrganizationConfig       pgtype.Text
	OrganizationTypeID       int32
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.OrganizationName,
		arg.OrganizationCreatedAt,
		arg.OrganizationUpdatedAt,
		arg.OrganizationRealm,
		arg.OrganizationCountry,
		arg.OrganizationSupportEmail,
		arg.OrganizationActive,
		arg.OrganizationReportQ,
		arg.OrganizationConfig,
		arg.OrganizationTypeID,
	)
	var organization_id int32
	err := row.Scan(&organization_id)
	return organization_id, err
}

type CreateOrganizationsParams struct {
	OrganizationName         string
	OrganizationCreatedAt    int32
	OrganizationUpdatedAt    int32
	OrganizationRealm        string
	OrganizationCountry      pgtype.Text
	OrganizationSupportEmail string
	OrganizationActive       pgtype.Bool
	OrganizationReportQ      pgtype.Bool
	OrganizationConfig       pgtype.Text
	OrganizationTypeID       int32
}

const deleteOrganizationById = `-- name: DeleteOrganizationById :exec
DELETE FROM organization
WHERE organization_id = $1
`

func (q *Queries) DeleteOrganizationById(ctx context.Context, organizationID int32) error {
	_, err := q.db.Exec(ctx, deleteOrganizationById, organizationID)
	return err
}

const getOrganizationByName = `-- name: GetOrganizationByName :one
SELECT
  organization_id AS id,
  organization_name AS name,
  organization_realm AS realm
FROM organization
WHERE organization_realm = $1 AND organization_active = TRUE
`

type GetOrganizationByNameRow struct {
	ID    int32
	Name  string
	Realm string
}

func (q *Queries) GetOrganizationByName(ctx context.Context, organizationRealm string) (GetOrganizationByNameRow, error) {
	row := q.db.QueryRow(ctx, getOrganizationByName, organizationRealm)
	var i GetOrganizationByNameRow
	err := row.Scan(&i.ID, &i.Name, &i.Realm)
	return i, err
}

const listOrganization = `-- name: ListOrganization :many
SELECT 
    organization.organization_id, organization.organization_name, organization.organization_created_at, organization.organization_updated_at, organization.organization_realm, organization.organization_country, organization.organization_support_email, organization.organization_active, organization.organization_report_q, organization.organization_config, organization.organization_type_id, 
    organization_type.organization_type_name, 
    COUNT(*) OVER() AS total_items
FROM organization
INNER JOIN organization_type 
    ON organization.organization_type_id = organization_type.organization_type_id
WHERE ($1::INTEGER = 0 OR organization.organization_id = $2)
ORDER BY organization.organization_id DESC
LIMIT $3 OFFSET $4
`

type ListOrganizationParams struct {
	Column1        int32
	OrganizationID int32
	Limit          int32
	Offset         int32
}

type ListOrganizationRow struct {
	OrganizationID           int32
	OrganizationName         string
	OrganizationCreatedAt    int32
	OrganizationUpdatedAt    int32
	OrganizationRealm        string
	OrganizationCountry      pgtype.Text
	OrganizationSupportEmail string
	OrganizationActive       pgtype.Bool
	OrganizationReportQ      pgtype.Bool
	OrganizationConfig       pgtype.Text
	OrganizationTypeID       int32
	OrganizationTypeName     string
	TotalItems               int64
}

func (q *Queries) ListOrganization(ctx context.Context, arg ListOrganizationParams) ([]ListOrganizationRow, error) {
	rows, err := q.db.Query(ctx, listOrganization,
		arg.Column1,
		arg.OrganizationID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrganizationRow{}
	for rows.Next() {
		var i ListOrganizationRow
		if err := rows.Scan(
			&i.OrganizationID,
			&i.OrganizationName,
			&i.OrganizationCreatedAt,
			&i.OrganizationUpdatedAt,
			&i.OrganizationRealm,
			&i.OrganizationCountry,
			&i.OrganizationSupportEmail,
			&i.OrganizationActive,
			&i.OrganizationReportQ,
			&i.OrganizationConfig,
			&i.OrganizationTypeID,
			&i.OrganizationTypeName,
			&i.TotalItems,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :execresult
UPDATE organization
SET 
    organization_name = $1,
    organization_updated_at = $2,
    organization_realm = $3,
    organization_country = $4,
    organization_support_email = $5,
    organization_active = $6,
    organization_report_q = $7,
    organization_config = $8,
    organization_type_id = $9
WHERE organization_id = $10
`

type UpdateOrganizationParams struct {
	OrganizationName         string
	OrganizationUpdatedAt    int32
	OrganizationRealm        string
	OrganizationCountry      pgtype.Text
	OrganizationSupportEmail string
	OrganizationActive       pgtype.Bool
	OrganizationReportQ      pgtype.Bool
	OrganizationConfig       pgtype.Text
	OrganizationTypeID       int32
	OrganizationID           int32
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateOrganization,
		arg.OrganizationName,
		arg.OrganizationUpdatedAt,
		arg.OrganizationRealm,
		arg.OrganizationCountry,
		arg.OrganizationSupportEmail,
		arg.OrganizationActive,
		arg.OrganizationReportQ,
		arg.OrganizationConfig,
		arg.OrganizationTypeID,
		arg.OrganizationID,
	)
}
