// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/gatekeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatekeeperService_RecordUsage_FullMethodName     = "/gatekeeper.GatekeeperService/RecordUsage"
	GatekeeperService_ValidateRequest_FullMethodName = "/gatekeeper.GatekeeperService/ValidateRequest"
)

// GatekeeperServiceClient is the client API for GatekeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatekeeperServiceClient interface {
	RecordUsage(ctx context.Context, in *RecordUsageRequest, opts ...grpc.CallOption) (*RecordUsageResponse, error)
	ValidateRequest(ctx context.Context, in *ValidateRequestRequest, opts ...grpc.CallOption) (*ValidateRequestResponse, error)
}

type gatekeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatekeeperServiceClient(cc grpc.ClientConnInterface) GatekeeperServiceClient {
	return &gatekeeperServiceClient{cc}
}

func (c *gatekeeperServiceClient) RecordUsage(ctx context.Context, in *RecordUsageRequest, opts ...grpc.CallOption) (*RecordUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordUsageResponse)
	err := c.cc.Invoke(ctx, GatekeeperService_RecordUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatekeeperServiceClient) ValidateRequest(ctx context.Context, in *ValidateRequestRequest, opts ...grpc.CallOption) (*ValidateRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateRequestResponse)
	err := c.cc.Invoke(ctx, GatekeeperService_ValidateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatekeeperServiceServer is the server API for GatekeeperService service.
// All implementations must embed UnimplementedGatekeeperServiceServer
// for forward compatibility.
type GatekeeperServiceServer interface {
	RecordUsage(context.Context, *RecordUsageRequest) (*RecordUsageResponse, error)
	ValidateRequest(context.Context, *ValidateRequestRequest) (*ValidateRequestResponse, error)
	mustEmbedUnimplementedGatekeeperServiceServer()
}

// UnimplementedGatekeeperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatekeeperServiceServer struct{}

func (UnimplementedGatekeeperServiceServer) RecordUsage(context.Context, *RecordUsageRequest) (*RecordUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordUsage not implemented")
}
func (UnimplementedGatekeeperServiceServer) ValidateRequest(context.Context, *ValidateRequestRequest) (*ValidateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRequest not implemented")
}
func (UnimplementedGatekeeperServiceServer) mustEmbedUnimplementedGatekeeperServiceServer() {}
func (UnimplementedGatekeeperServiceServer) testEmbeddedByValue()                           {}

// UnsafeGatekeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatekeeperServiceServer will
// result in compilation errors.
type UnsafeGatekeeperServiceServer interface {
	mustEmbedUnimplementedGatekeeperServiceServer()
}

func RegisterGatekeeperServiceServer(s grpc.ServiceRegistrar, srv GatekeeperServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatekeeperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatekeeperService_ServiceDesc, srv)
}

func _GatekeeperService_RecordUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatekeeperServiceServer).RecordUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatekeeperService_RecordUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatekeeperServiceServer).RecordUsage(ctx, req.(*RecordUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatekeeperService_ValidateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatekeeperServiceServer).ValidateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatekeeperService_ValidateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatekeeperServiceServer).ValidateRequest(ctx, req.(*ValidateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatekeeperService_ServiceDesc is the grpc.ServiceDesc for GatekeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatekeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatekeeper.GatekeeperService",
	HandlerType: (*GatekeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordUsage",
			Handler:    _GatekeeperService_RecordUsage_Handler,
		},
		{
			MethodName: "ValidateRequest",
			Handler:    _GatekeeperService_ValidateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gatekeeper.proto",
}
