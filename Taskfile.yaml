version: '3'

vars:
  SERVICE_NAME: go-admin
  REPO_FOLDER:
    sh: pwd
  BUILD_DIR: "{{.REPO_FOLDER}}/build"
  GIT_HASH:
    sh: git rev-parse --short HEAD
  GIT_TAG:
    sh: git describe --tags --exact-match HEAD 2>/dev/null || echo ""
  CONTAINER_IMAGE_TAG: "{{if .GIT_TAG}}{{.GIT_TAG}}{{else}}{{.GIT_HASH}}{{end}}"
  ENABLE_PPROF: "true"
  PROFILE_OUTPUT: top
  DB_DRIVER: postgres
  DB_NAME: "{{.SERVICE_NAME}}"
  DB_DSN: "postgres://{{.DB_NAME}}:{{.DB_NAME}}@localhost:5432/{{.DB_NAME}}?sslmode=disable"
  MIGRATIONS_DIR: ./internal/database/sqlc/schema
  ENTRYPOINT: "cmd/{{.SERVICE_NAME}}/main.go"
  DEBUG_ENTRYPOINT: "cmd/debug/debug.go"

tasks:
  clean:
    cmds:
      # - go clean
      - go clean -modcache

  mod-update:
    cmds:
      - go mod tidy
      # - go mod vendor

  run-debug:
    cmds:
      - echo "Running service {{.SERVICE_NAME}}"
      - "ENABLE_PPROF={{.ENABLE_PPROF}} ENVIRONMENT=debug go run {{.ENTRYPOINT}}"

  run-dev:
    cmds:
      - ENABLE_PPROF={{.ENABLE_PPROF}} ENVIRONMENT=dev go run {{.ENTRYPOINT}}

  run-prod:
    cmds:
      - ENABLE_PPROF={{.ENABLE_PPROF}} ENVIRONMENT=prod go run {{.ENTRYPOINT}}

  debug:
    cmds:
      - go run {{.DEBUG_ENTRYPOINT}}

  run-go-admin:
    vars: { SERVICE_NAME: go-admin }
    cmds:
      - task: run-debug
  
  run-gatekeeper:
    vars:
      SERVICE_NAME: gate-keeper
      ENTRYPOINT: cmd/gate-keeper/main.go
    cmds:
      - task: run-debug
        vars:
          SERVICE_NAME: gate-keeper
          ENTRYPOINT: cmd/gate-keeper/main.go

  run-mcp-server:
    cmds:
      - powershell -ExecutionPolicy Bypass -Command "cd mcp-server; python -m venv .venv; .\.venv\Scripts\Activate.ps1; python -m pip install --upgrade pip; python -m pip install -r requirements.txt; python main.py"

  run-mcp-client:
    cmds:
      - powershell -ExecutionPolicy Bypass -Command "cd mcp-client; python -m venv .venv; .\.venv\Scripts\Activate.ps1; python -m pip install --upgrade pip; python -m pip install -r requirements.txt; python main.py"

  test:
    cmds:
      - go test -v ./...

  test-summary:
    cmds:
      - go test -v -json ./... | tparse

  mem-profile:
    cmds:
      - echo "{{.PROFILE_OUTPUT}}" | go tool pprof mem.pprof

  cpu-profile:
    cmds:
      - echo "{{.PROFILE_OUTPUT}}" | go tool pprof cpu.pprof

  migrate-up:
    cmds:
      - go get github.com/pressly/goose/v3/cmd/goose
      - go run github.com/pressly/goose/v3/cmd/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} "{{.DB_DSN}}" up

  migrate-down:
    cmds:
      - go get github.com/pressly/goose/v3/cmd/goose
      - go run github.com/pressly/goose/v3/cmd/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} "{{.DB_DSN}}" down

  migrate-status:
    cmds:
      - go get github.com/pressly/goose/v3/cmd/goose
      - go run github.com/pressly/goose/v3/cmd/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} "{{.DB_DSN}}" status

  sqlc-generate:
    cmds:
      - go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
      - sqlc generate

  compile-artifacts:
    vars:
      CURRENT_SERVICE_NAME: "{{.SERVICE_NAME | default .SERVICE_NAME}}"
      CONTAINER_IMAGE: "{{.CURRENT_SERVICE_NAME}}:{{.CONTAINER_IMAGE_TAG}}"
      CONTAINER_IMAGE_LATEST: "{{.CURRENT_SERVICE_NAME}}:latest"
    cmds:
      - task: pre_compile
        vars: { SERVICE_NAME: "{{.CURRENT_SERVICE_NAME}}" }
      - task: compile
        vars: { SERVICE_NAME: "{{.CURRENT_SERVICE_NAME}}" }

  pre_compile:
    cmds:
      - task: clean
      - task: mod-update

  compile:
    vars:
      CURRENT_SERVICE_NAME: "{{.SERVICE_NAME | default .SERVICE_NAME}}"
    dir: "{{.REPO_FOLDER}}/cmd/{{.CURRENT_SERVICE_NAME}}"
    cmds:
      - echo "SERVICE_NAME={{.CURRENT_SERVICE_NAME}}"
      - echo "PWD=$(pwd)"
      - task: mkdir-build-dir
      - GOOS=linux GOARCH=amd64 go build -o ../../build/{{.CURRENT_SERVICE_NAME}} main.go

  mkdir-build-dir:
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "if (!(Test-Path '{{.BUILD_DIR}}')) { New-Item -ItemType Directory -Path '{{.BUILD_DIR}}' }"
        {{else}}
        mkdir -p {{.BUILD_DIR}}
        {{end}}

  create-schema-dir:
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "if (!(Test-Path 'schema')) { New-Item -ItemType Directory -Path 'schema' | Out-Null }"
        {{else}}
        mkdir -p schema
        {{end}}

  remove-schema-dir:
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "if (Test-Path 'schema') { Remove-Item -Recurse -Force 'schema' }"
        {{else}}
        rm -rf schema
        {{end}}
  
  copy-openapi-spec:
    cmds: 
    - powershell -ExecutionPolicy Bypass -Command "cp -r apidoc/ mcp-server/_apidoc"
  
  remove-openapi-spec:
    cmds:
    - powershell -ExecutionPolicy Bypass -Command "rm -rf mcp-server/_apidoc"

  build-container:
    vars:
      CURRENT_SERVICE_NAME: "{{.SERVICE_NAME | default .SERVICE_NAME}}"
      CONTAINER_IMAGE: "{{.CURRENT_SERVICE_NAME}}:{{.CONTAINER_IMAGE_TAG}}"
      CONTAINER_IMAGE_LATEST: "{{.CURRENT_SERVICE_NAME}}:latest"
    deps:
      - task: compile-artifacts
        vars: { SERVICE_NAME: "{{.CURRENT_SERVICE_NAME}}" }
    cmds:
      - task: create-schema-dir
      - |
        {{if eq OS "windows"}}
        powershell -Command "if ('{{.CURRENT_SERVICE_NAME}}' -eq 'gatari-db-init') { Copy-Item -Recurse internal/database/sqlc/schema/* schema/ }"
        {{else}}
        if [ "{{.CURRENT_SERVICE_NAME}}" = "gatari-db-init" ]; then
          cp -r internal/database/sqlc/schema/* schema/
        fi
        {{end}}
      - docker build --build-arg BINARY_NAME={{.CURRENT_SERVICE_NAME}} -t {{.CONTAINER_IMAGE}} .
      - docker tag {{.CONTAINER_IMAGE}} {{.CONTAINER_IMAGE_LATEST}}
      - task: remove-schema-dir

  build-mcp-client-container:
    vars:
      CURRENT_SERVICE_NAME: "gatari-mcp-client"
      CONTAINER_IMAGE: "{{.CURRENT_SERVICE_NAME}}:{{.CONTAINER_IMAGE_TAG}}"
      CONTAINER_IMAGE_LATEST: "{{.CURRENT_SERVICE_NAME}}:latest"
    cmds:
      - powershell -ExecutionPolicy Bypass -Command "cd mcp-client; docker build -t {{.CONTAINER_IMAGE}} ."
      - docker tag {{.CONTAINER_IMAGE}} {{.CONTAINER_IMAGE_LATEST}}

  build-mcp-server-container:
    vars:
      CURRENT_SERVICE_NAME: "gatari-mcp-server"
      CONTAINER_IMAGE: "{{.CURRENT_SERVICE_NAME}}:{{.CONTAINER_IMAGE_TAG}}"
      CONTAINER_IMAGE_LATEST: "{{.CURRENT_SERVICE_NAME}}:latest"
    cmds:
      - task: copy-openapi-spec
      - powershell -ExecutionPolicy Bypass -Command "cd mcp-server; docker build -t {{.CONTAINER_IMAGE}} ."
      - docker tag {{.CONTAINER_IMAGE}} {{.CONTAINER_IMAGE_LATEST}}
      - task: remove-openapi-spec

  remove-container:
    vars:
      CURRENT_SERVICE_NAME: "{{.SERVICE_NAME | default .SERVICE_NAME}}"
    cmds:
      - |
        powershell -Command "
          docker images --format '{{.Repository}}:{{.Tag}}' |
          ForEach-Object {
            if (\$_ -like '{{.CURRENT_SERVICE_NAME}}:*') {
              docker rmi \$_
            }
          }
        "

  start-container:
    cmds:
      - docker compose -f docker-compose.yaml up -d

  stop-container:
    cmds:
      - docker compose -f docker-compose.yaml down